"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[754],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),i=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=i(n),m=a,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const s={slug:"useRef post",title:"useRef",authors:"faisal",tags:["react js","useRef"]},o="useRef",l={permalink:"/techdocs/blog/useRef post",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/useRef.md",source:"@site/blog/useRef.md",title:"useRef",description:"useRef will store the element, not value*, for storing value, we should use useState",date:"2023-07-18T11:31:04.000Z",formattedDate:"July 18, 2023",tags:[{label:"react js",permalink:"/techdocs/blog/tags/react-js"},{label:"useRef",permalink:"/techdocs/blog/tags/use-ref"}],readingTime:2.14,hasTruncateMarker:!1,authors:[{name:"Mohamed Faisal",title:"<react js | javascript>",url:"https://sebastienlorber.com",imageURL:"https://raw.githubusercontent.com/fysal-dev/techdocs/main/blog/img/fysalnew.jpg",key:"faisal"}],frontMatter:{slug:"useRef post",title:"useRef",authors:"faisal",tags:["react js","useRef"]}},u={authorsImageUrls:[void 0]},i=[{value:"Returns",id:"returns",level:2},{value:"When to use useRef?",id:"when-to-use-useref",level:2},{value:"Using useState hook",id:"using-usestate-hook",level:2}],p={toc:i},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"useRef will store the ",(0,a.kt)("strong",{parentName:"li"},"element, not value"),", for storing value, we should use ",(0,a.kt)("inlineCode",{parentName:"li"},"useState")),(0,a.kt)("li",{parentName:"ul"},"using useRef, you can access the object which contains ",(0,a.kt)("inlineCode",{parentName:"li"},".current")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useRef")," will never show the modified value at re-render")),(0,a.kt)("h2",{id:"returns"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"`useRef` returns an object called `current`\n")),(0,a.kt)("h2",{id:"when-to-use-useref"},"When to use useRef?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When you want to take the value and manipulate the value, But you don't want to re-render, then use the useRef"),(0,a.kt)("li",{parentName:"ul"},"for eg; useRef will be highly usefull when you submit a form, when you don't need to validate at realtime")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Don't read or write using useRef while re-rendering the component"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="using useRef hook"',title:'"using',useRef:!0,'hook"':!0},'import { useRef } from "react";\n\nexport default function SignIn() {\n \n    const inputUserID = useRef(\'\');     //initialise\n    const inputPassword = useRef(\'\');   //initialise\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        \n        console.log(inputUserID.current);   //<input type="text" name="userID" value="">\n        console.log(inputPassword.current); //<input type="text" name="userPassword" value="">\n\n        console.log("InputUserID = " + inputUserID.current.value);      //InputUserID = fysal@gmail.com\n        console.log("inputPassword = " + inputPassword.current.value);  //inputPassword = passwordtext\n    };\n\n  return(\n    <>\n        <input ref={inputUserID} type="text" name="userID"  defaultValue=""/>\n        <input ref={inputPassword} type="text" name="userPassword" defaultValue="" />\n           \n        <button type="submit" onClick={handleSubmit}>Click Me</button>\n    </>\n  )\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="console log output"',title:'"console',log:!0,'output"':!0},'    <input type="text" name="userID" value="">\n    <input type="text" name="userPassword" value="">\n    InputUserID = fysal@gmail.com\n    inputPassword = passwordtext\n')),(0,a.kt)("h2",{id:"using-usestate-hook"},"Using useState hook"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To change the state value, first we should import ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," and initialise the value"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'const [userId, setUserId] = useState("");\nconst [password, setPassword] = useState("");  \n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To set the state value, we have to use ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," for input text"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'<input type="text" name="userID" onChange={(e)=>setUserId(e.target.value)} />\n<input type="text" name="userPassword" onChange={(e)=>setUserId(e.target.value)} />\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Each time, when user enter the text, ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," will be triggerred, and set the value and complete component will be re-rendered. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"if user enter ",(0,a.kt)("inlineCode",{parentName:"p"},"fysal@gmail.com"),", totel charecter is 15, component will re-render 15 times")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"same thing for password text field will follow"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="using useState hooks"',title:'"using',useState:!0,'hooks"':!0},'import { useState } from "react";\n\nexport default function SignIn() {\n\n    console.log("Sign in Initiated");\n\n    const [userId, setUserId] = useState("");\n    const [password, setPassword] = useState("");\n\n    console.log(\'userId =\'+userId)\n    console.log(\'password =\'+password)\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n    };\n  return(\n    <>\n        <input type="text" name="userID" onChange={(e)=>{\n                console.log(\'set userId value\')\n                setUserId(e.target.value)\n              }} />\n        <input type="text" name="userPassword" onChange={(e)=>{\n                console.log(\'set password value\')\n                setUserId(e.target.value)\n              }} />\n           \n        <button type="submit" onClick={handleSubmit}>Click Me</button>\n    </>\n  )\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when I just enter the text only first 3 letters ",(0,a.kt)("inlineCode",{parentName:"li"},"fys")),(0,a.kt)("li",{parentName:"ul"},"here is the following output on console log")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="console log output"',title:'"console',log:!0,'output"':!0},"set userId value\nSign in Initiated\nuserId =f\npassword =\n\nset userId value\nSign in Initiated\nuserId =fy\npassword =\n\nset userId value\nSign in Initiated\nuserId =fys\npassword =\n")))}d.isMDXComponent=!0}}]);