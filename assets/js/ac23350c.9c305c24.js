"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[6894],{1134:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"axios interceptor post","metadata":{"permalink":"/techdocs/blog/axios interceptor post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Axios-Interceptors.md","source":"@site/blog/Axios-Interceptors.md","title":"Axios Interceptor","description":"What is Axios Interceptors?","date":"2023-07-23T10:40:04.000Z","formattedDate":"July 23, 2023","tags":[{"label":"react js","permalink":"/techdocs/blog/tags/react-js"},{"label":"axios","permalink":"/techdocs/blog/tags/axios"},{"label":"axios interceptor","permalink":"/techdocs/blog/tags/axios-interceptor"}],"readingTime":2.12,"hasTruncateMarker":false,"authors":[{"name":"Mohamed Faisal","title":"<React js | Javascript>","url":"https://sebastienlorber.com","imageURL":"https://raw.githubusercontent.com/fysal-dev/techdocs/main/blog/img/fysalnew.jpg","key":"faisal"}],"frontMatter":{"slug":"axios interceptor post","title":"Axios Interceptor","authors":"faisal","tags":["react js","axios","axios interceptor"]},"nextItem":{"title":"useRef","permalink":"/techdocs/blog/useRef post"}},"content":"### What is Axios Interceptors?\\r\\n\\r\\nWhenever client make request to Backend, the <span class=\'highlight\'> axios interceptors </span> will send an information(eg: token) before the request made .\\r\\n\\r\\nWith the help of axios interceptor information, we can do some action in the backend based on our requirement\\r\\n\\r\\n**For example:** If we are using **JWT Token** methodology in our applicaiton for user authentication, so whenever client made any request, the axios interceptor will send Token, along with other header information, we can validate the user is exists or not\\r\\n\\r\\n### Why we need to use?\\r\\n\\r\\nNormally If we wants to send a `axios.post` request, we have to add a following paramenters\\r\\n\\r\\n* url (base_url + page_url)\\r\\n* parameters\\r\\n* headers(which contains)\\r\\n    * Authorization\\r\\n    * Content-Type\\r\\n    * Custom-headers\\r\\n  \\r\\nthe below code is sample for post request.\\r\\n\\r\\n```jsx title=\'axios post request(without Interceptor)\'\\r\\nconst {data} = await axios\\r\\n    .post(\'https://httpbin.org/newpost\', \\r\\n    {\\r\\n        firstName: \'Fred\',\\r\\n        lastName: \'Flintstone\',\\r\\n        orders: [1, 2, 3]\\r\\n    }, \\r\\n    {\\r\\n        headers: {\\r\\n        \'Authorization\': \'Bearer my-token\'\\r\\n        \'Content-Type\': \'application/json\',\\r\\n        }\\r\\n    })\\r\\n```\\r\\n\\r\\nJust imagine, suppose if our application has more than 100 request, all the request has a common base_url = `\\"https://httpbin.org\\"`, content-type = `\\"application/json\\"` and everytime attach `\\"Token\\"` along with header. these are all same code which is repeating in every request that we make.\\r\\n\\r\\nsuppose in future, if we wants to change our base_url from `\\"https://httpbin.org\\"` to `\\"https://httpbin.en\\"`, then we need to change in every place of request.\\r\\n\\r\\nTo solve this issue, we can make a basic setup at one time as axios interceptor. Then wehenever we need to make request, this axios interceptor instance will hold the information, it will send it to backend before make request.\\r\\n\\r\\n See the following code\\r\\n\\r\\n```jsx title=\'Axios-Interceptor\'\\r\\nimport axios from \\"axios\\";\\r\\n\\r\\nconst token = localStorage.getItem(\'Token\');\\r\\nconst _AUTHORIZATION_TOKEN = (token)? `Bearer ${token}` : \'\';\\r\\n\\r\\nconst axiosInstance = axios.create({\\r\\n    baseURL: \\"https://httpbin.org\\"\\r\\n});\\r\\n\\r\\naxiosInstance.interceptors.request.use((request)=>{\\r\\n    request.headers.Authorization = _AUTHORIZATION_TOKEN\\r\\n    request.headers[\\"Content-Type\\"]=\\"application/json\\";\\r\\n    request.headers.myapp = \'my-app\'\\r\\n\\r\\n    return request\\r\\n}\\r\\n,(error) => {\\r\\n    return Promise.reject(error)\\r\\n})\\r\\n\\r\\naxiosInstance.interceptors.response.use((response)=> {\\r\\n    return response\\r\\n}, (error) => {\\r\\n    return Promise.reject(error)\\r\\n})\\r\\n\\r\\nexport default axiosInstance\\r\\n```\\r\\n\\r\\nTo make request, just import the `axiosInstance`. pass the url(`\\"/newPost\\"`) as parameter but this time without base url(`\\"https://httpbin.org\\"`)\\r\\n\\r\\n\\r\\n```jsx title=\'Axios request with Interceptor\'\\r\\nimport axios from \\"../AxiosInterceptor\\";\\r\\n\\r\\nconst {data} = await axios\\r\\n    .post(\\"/newpost\\", \\r\\n    {\\r\\n        firstName: \'Fred\',\\r\\n        lastName: \'Flintstone\',\\r\\n        orders: [1, 2, 3]\\r\\n    })\\r\\n    .then(function (response) {\\r\\n      return response;\\r\\n    });\\r\\n```\\r\\n\\r\\nAxios interceptor will take care of binding Base_url + page_url, then it will make request = `\\"https://httpbin.org/newPost\\"`,\\r\\n\\r\\nNo more burder to add headers for every request. axios interceptor will take the responsible to attach along with each and every request."},{"id":"useRef post","metadata":{"permalink":"/techdocs/blog/useRef post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/useRef.md","source":"@site/blog/useRef.md","title":"useRef","description":"useRef will store the element, not value*, for storing value, we should use useState","date":"2023-07-18T11:31:04.000Z","formattedDate":"July 18, 2023","tags":[{"label":"react js","permalink":"/techdocs/blog/tags/react-js"},{"label":"useRef","permalink":"/techdocs/blog/tags/use-ref"}],"readingTime":2.15,"hasTruncateMarker":false,"authors":[{"name":"Mohamed Faisal","title":"<React js | Javascript>","url":"https://sebastienlorber.com","imageURL":"https://raw.githubusercontent.com/fysal-dev/techdocs/main/blog/img/fysalnew.jpg","key":"faisal"}],"frontMatter":{"slug":"useRef post","title":"useRef","authors":"faisal","tags":["react js","useRef"]},"prevItem":{"title":"Axios Interceptor","permalink":"/techdocs/blog/axios interceptor post"}},"content":"* useRef will store the <span class=\'highlight\'>**element, not value**</span>, for storing value, we should use `useState`\\r\\n* using useRef, you can access the object which contains <span class=\'highlight\'>.current</span>\\r\\n* `useRef` will never show the modified value at re-render\\r\\n\\r\\n## Returns\\r\\n\\r\\n    `useRef` returns an object called `current`\\r\\n\\r\\n## When to use useRef?\\r\\n* When you want to take the value and manipulate the value, But you don\'t want to re-render, then use the useRef\\r\\n* for eg; useRef will be highly usefull when you submit a form, when you don\'t need to validate at realtime\\r\\n\\r\\n:::danger\\r\\n\\r\\n* Don\'t read or write using useRef while re-rendering the component\\r\\n\\r\\n:::\\r\\n\\r\\n```jsx title=\\"using useRef hook\\"\\r\\nimport { useRef } from \\"react\\";\\r\\n\\r\\nexport default function SignIn() {\\r\\n \\r\\n    const inputUserID = useRef(\'\');     //initialise\\r\\n    const inputPassword = useRef(\'\');   //initialise\\r\\n\\r\\n    const handleSubmit = (event) => {\\r\\n        event.preventDefault();\\r\\n        \\r\\n        console.log(inputUserID.current);   //<input type=\\"text\\" name=\\"userID\\" value=\\"\\">\\r\\n        console.log(inputPassword.current); //<input type=\\"text\\" name=\\"userPassword\\" value=\\"\\">\\r\\n\\r\\n        console.log(\\"InputUserID = \\" + inputUserID.current.value);      //InputUserID = fysal@gmail.com\\r\\n        console.log(\\"inputPassword = \\" + inputPassword.current.value);  //inputPassword = passwordtext\\r\\n    };\\r\\n\\r\\n  return(\\r\\n    <>\\r\\n        <input ref={inputUserID} type=\\"text\\" name=\\"userID\\"  defaultValue=\\"\\"/>\\r\\n        <input ref={inputPassword} type=\\"text\\" name=\\"userPassword\\" defaultValue=\\"\\" />\\r\\n           \\r\\n        <button type=\\"submit\\" onClick={handleSubmit}>Click Me</button>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n```js title=\\"console log output\\"\\r\\n    <input type=\\"text\\" name=\\"userID\\" value=\\"\\">\\r\\n    <input type=\\"text\\" name=\\"userPassword\\" value=\\"\\">\\r\\n    InputUserID = fysal@gmail.com\\r\\n    inputPassword = passwordtext\\r\\n```\\r\\n\\r\\n## Using useState hook\\r\\n\\r\\n* To change the state value, first we should import `useState` and initialise the value\\r\\n  \\r\\n      const [userId, setUserId] = useState(\\"\\");\\r\\n      const [password, setPassword] = useState(\\"\\");  \\r\\n\\r\\n* To set the state value, we have to use `onChange` for input text\\r\\n    \\r\\n      <input type=\\"text\\" name=\\"userID\\" onChange={(e)=>setUserId(e.target.value)} />\\r\\n      <input type=\\"text\\" name=\\"userPassword\\" onChange={(e)=>setUserId(e.target.value)} />\\r\\n\\r\\n* Each time, when user enter the text, `onChange` will be triggerred, and set the value and complete component will be re-rendered. \\r\\n* if user enter `fysal@gmail.com`, totel charecter is 15, component will re-render 15 times\\r\\n* same thing for password text field will follow\\r\\n\\r\\n```jsx title=\\"using useState hooks\\"\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\nexport default function SignIn() {\\r\\n\\r\\n    console.log(\\"Sign in Initiated\\");\\r\\n\\r\\n    const [userId, setUserId] = useState(\\"\\");\\r\\n    const [password, setPassword] = useState(\\"\\");\\r\\n\\r\\n    console.log(\'userId =\'+userId)\\r\\n    console.log(\'password =\'+password)\\r\\n\\r\\n    const handleSubmit = (event) => {\\r\\n        event.preventDefault();\\r\\n    };\\r\\n  return(\\r\\n    <>\\r\\n        <input type=\\"text\\" name=\\"userID\\" onChange={(e)=>{\\r\\n                console.log(\'set userId value\')\\r\\n                setUserId(e.target.value)\\r\\n              }} />\\r\\n        <input type=\\"text\\" name=\\"userPassword\\" onChange={(e)=>{\\r\\n                console.log(\'set password value\')\\r\\n                setUserId(e.target.value)\\r\\n              }} />\\r\\n           \\r\\n        <button type=\\"submit\\" onClick={handleSubmit}>Click Me</button>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n* when I just enter the text only first 3 letters `fys`\\r\\n* here is the following output on console log\\r\\n  \\r\\n```js title=\\"console log output\\"\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =f\\r\\npassword =\\r\\n\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =fy\\r\\npassword =\\r\\n\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =fys\\r\\npassword =\\r\\n```"}]}')}}]);