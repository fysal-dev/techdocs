"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[894],{1134:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"useRef post","metadata":{"permalink":"/techdocs/blog/useRef post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/useRef.md","source":"@site/blog/useRef.md","title":"useRef","description":"useRef will store the element, not value*, for storing value, we should use useState","date":"2023-07-18T11:31:04.000Z","formattedDate":"July 18, 2023","tags":[{"label":"react js","permalink":"/techdocs/blog/tags/react-js"},{"label":"useRef","permalink":"/techdocs/blog/tags/use-ref"}],"readingTime":2.14,"hasTruncateMarker":false,"authors":[{"name":"Mohamed Faisal","title":"<react js | javascript>","url":"https://sebastienlorber.com","imageURL":"https://raw.githubusercontent.com/fysal-dev/techdocs/main/blog/img/fysalnew.jpg","key":"faisal"}],"frontMatter":{"slug":"useRef post","title":"useRef","authors":"faisal","tags":["react js","useRef"]}},"content":"* useRef will store the **element, not value**, for storing value, we should use `useState`\\r\\n* using useRef, you can access the object which contains `.current`\\r\\n* `useRef` will never show the modified value at re-render\\r\\n\\r\\n## Returns\\r\\n\\r\\n    `useRef` returns an object called `current`\\r\\n\\r\\n## When to use useRef?\\r\\n* When you want to take the value and manipulate the value, But you don\'t want to re-render, then use the useRef\\r\\n* for eg; useRef will be highly usefull when you submit a form, when you don\'t need to validate at realtime\\r\\n\\r\\n:::danger\\r\\n\\r\\n* Don\'t read or write using useRef while re-rendering the component\\r\\n\\r\\n:::\\r\\n\\r\\n```jsx title=\\"using useRef hook\\"\\r\\nimport { useRef } from \\"react\\";\\r\\n\\r\\nexport default function SignIn() {\\r\\n \\r\\n    const inputUserID = useRef(\'\');     //initialise\\r\\n    const inputPassword = useRef(\'\');   //initialise\\r\\n\\r\\n    const handleSubmit = (event) => {\\r\\n        event.preventDefault();\\r\\n        \\r\\n        console.log(inputUserID.current);   //<input type=\\"text\\" name=\\"userID\\" value=\\"\\">\\r\\n        console.log(inputPassword.current); //<input type=\\"text\\" name=\\"userPassword\\" value=\\"\\">\\r\\n\\r\\n        console.log(\\"InputUserID = \\" + inputUserID.current.value);      //InputUserID = fysal@gmail.com\\r\\n        console.log(\\"inputPassword = \\" + inputPassword.current.value);  //inputPassword = passwordtext\\r\\n    };\\r\\n\\r\\n  return(\\r\\n    <>\\r\\n        <input ref={inputUserID} type=\\"text\\" name=\\"userID\\"  defaultValue=\\"\\"/>\\r\\n        <input ref={inputPassword} type=\\"text\\" name=\\"userPassword\\" defaultValue=\\"\\" />\\r\\n           \\r\\n        <button type=\\"submit\\" onClick={handleSubmit}>Click Me</button>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n```js title=\\"console log output\\"\\r\\n    <input type=\\"text\\" name=\\"userID\\" value=\\"\\">\\r\\n    <input type=\\"text\\" name=\\"userPassword\\" value=\\"\\">\\r\\n    InputUserID = fysal@gmail.com\\r\\n    inputPassword = passwordtext\\r\\n```\\r\\n\\r\\n## Using useState hook\\r\\n\\r\\n* To change the state value, first we should import `useState` and initialise the value\\r\\n  \\r\\n      const [userId, setUserId] = useState(\\"\\");\\r\\n      const [password, setPassword] = useState(\\"\\");  \\r\\n\\r\\n* To set the state value, we have to use `onChange` for input text\\r\\n    \\r\\n      <input type=\\"text\\" name=\\"userID\\" onChange={(e)=>setUserId(e.target.value)} />\\r\\n      <input type=\\"text\\" name=\\"userPassword\\" onChange={(e)=>setUserId(e.target.value)} />\\r\\n\\r\\n* Each time, when user enter the text, `onChange` will be triggerred, and set the value and complete component will be re-rendered. \\r\\n* if user enter `fysal@gmail.com`, totel charecter is 15, component will re-render 15 times\\r\\n* same thing for password text field will follow\\r\\n\\r\\n```jsx title=\\"using useState hooks\\"\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\nexport default function SignIn() {\\r\\n\\r\\n    console.log(\\"Sign in Initiated\\");\\r\\n\\r\\n    const [userId, setUserId] = useState(\\"\\");\\r\\n    const [password, setPassword] = useState(\\"\\");\\r\\n\\r\\n    console.log(\'userId =\'+userId)\\r\\n    console.log(\'password =\'+password)\\r\\n\\r\\n    const handleSubmit = (event) => {\\r\\n        event.preventDefault();\\r\\n    };\\r\\n  return(\\r\\n    <>\\r\\n        <input type=\\"text\\" name=\\"userID\\" onChange={(e)=>{\\r\\n                console.log(\'set userId value\')\\r\\n                setUserId(e.target.value)\\r\\n              }} />\\r\\n        <input type=\\"text\\" name=\\"userPassword\\" onChange={(e)=>{\\r\\n                console.log(\'set password value\')\\r\\n                setUserId(e.target.value)\\r\\n              }} />\\r\\n           \\r\\n        <button type=\\"submit\\" onClick={handleSubmit}>Click Me</button>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n* when I just enter the text only first 3 letters `fys`\\r\\n* here is the following output on console log\\r\\n  \\r\\n```js title=\\"console log output\\"\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =f\\r\\npassword =\\r\\n\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =fy\\r\\npassword =\\r\\n\\r\\nset userId value\\r\\nSign in Initiated\\r\\nuserId =fys\\r\\npassword =\\r\\n```"}]}')}}]);